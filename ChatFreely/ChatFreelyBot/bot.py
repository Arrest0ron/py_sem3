from .configure import get_key
from aiogram.utils.keyboard import  InlineKeyboardBuilder
from aiogram import Router, Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.methods import *
from aiogram.types import Message, CallbackQuery
from .keyboards import *
from .database import *


API_TOKEN = get_key()
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)
async def start_bot():
    await dp.start_polling(bot)

@router.callback_query(F.data == 'profile')
@router.message(Command("profile"))
async def profile(call):
    if isinstance(call, CallbackQuery):
        await call.answer('', show_alert=False)
    data = await fetch_user(call.from_user.id)
    answer = f"""
–î–∞–≤–∞–π —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {data.rating}
–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {data.total_connections}
–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {data.registration}
    """
    builder = InlineKeyboardBuilder()
    builder.add(*inline_to_menu_buttons_list)
    markup = builder.as_markup()
    await bot.send_message(chat_id = call.from_user.id, text= answer, reply_markup=markup)
   
@router.message(Command("start"))
async def start(message: Message):
    builder = InlineKeyboardBuilder()
    builder.add(*inline_to_menu_buttons_list)
    markup = builder.as_markup()
    await log_user(message.from_user.id)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! –ò—Å–ø–æ–ª—å–∑—É–π /menu, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)

@router.callback_query(F.data == 'stop')
@router.message(Command("stop"))
async def stop_search(call):
    print("Stop called.")
    if isinstance(call, CallbackQuery):
        await call.answer('', show_alert=False)
    is_searching = await is_in_search(call.from_user.id)
    if not is_searching:
        print(is_searching)
        return await menu(call)
    
    await drop_from_search(call.from_user.id)
    await bot.send_message(chat_id = call.from_user.id, text= f"–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!")
    await update_status(call.from_user.id, "normal")
    return await menu(call)

@router.callback_query(F.data == 'quit')
@router.message(Command("quit"))
async def quit_dialogue(call):
    if isinstance(call, CallbackQuery):
        await call.answer('', show_alert=False)
    builder = InlineKeyboardBuilder()
    builder.add(*inline_dialogue_end_buttons_list)
    markup = builder.as_markup()
    counterpart = await get_connected_user(call.from_user.id)
    if counterpart is None:
        return await bot.send_message(chat_id = call.from_user.id, text= f"–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –º–µ–Ω—é, –∏–ª–∏ /search, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.", reply_markup=markup)
    await bot.send_message(chat_id = call.from_user.id, text= f"–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –≤–∞—à–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∏–ª–∏ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.", reply_markup=markup)
    await drop_from_connections(call.from_user.id)
    await bot.send_message(chat_id = counterpart, text= f"–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–∏–∞–ª–æ–≥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∏–ª–∏ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.", reply_markup=markup)
    await after_dialogue(call.from_user.id,counterpart)
    builder = InlineKeyboardBuilder()
    builder.add(*inline_rate_buttons_list)
    builder.adjust(*[2,1])
    markup = builder.as_markup()
    await bot.send_message(chat_id=counterpart, text="–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?",reply_markup=markup)
    await bot.send_message(chat_id=call.from_user.id, text="–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?",reply_markup=markup)

@router.callback_query(F.data == 'decrease_rating')
async def decrease_rating(call: CallbackQuery):
    usr = await fetch_user(call.from_user.id)
    if usr.last_connected is not None:
        await call.message.edit_text(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
        await sub_rating(usr.last_connected, usr.telegram_uid)
    else:
        await call.message.edit_text(text="–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –æ—Ç–∑—ã–≤.")
    
@router.callback_query(F.data == 'increase_rating')
async def increase_rating(call: CallbackQuery):
    usr = await fetch_user(call.from_user.id)
    if usr.last_connected is not None:
        await call.message.edit_text(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
        await add_rating(usr.last_connected, usr.telegram_uid)
    else:
        await call.message.edit_text(text="–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –æ—Ç–∑—ã–≤.")

@router.callback_query(F.data == 'report')
async def report(call: CallbackQuery):
    usr = await fetch_user(call.from_user.id)
    
    if usr.last_connected is not None:
        await call.message.edit_text(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
        await add_report(usr.last_connected, usr.telegram_uid)
    else:
        await call.message.edit_text(text="–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –æ—Ç–∑—ã–≤.")
    
@router.callback_query(F.data == 'appeal')
async def report(call: CallbackQuery): 
    await call.message.edit_text(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–∫–∞–∑–Ω—ã–º –ø–∏—Å—å–º–æ–º –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ–±–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É:")
    await bot.send_location(call.from_user.id, latitude=55.766321, longitude=37.686584)
    

@router.callback_query(F.data == 'about')
async def about(call: CallbackQuery): 
    await call.answer(text="", show_alert=False)
    ab = await bot.get_me()
    await bot.send_message(chat_id=call.from_user.id, text=str(ab)+" located at:")
    await bot.send_location(call.from_user.id, latitude=55.766321, longitude=37.686584)
    
@router.callback_query(F.data == 'search')
@router.message(Command("search"))
async def search(call: CallbackQuery):
    usr = await fetch_user(call.from_user.id)
    if isinstance(call, CallbackQuery):
        await call.answer('', show_alert=False)
    if usr.user_status != 'normal':
        return await menu(call)
    await update_status(call.from_user.id, "search")
    await bot.send_dice(chat_id = call.from_user.id)
    builder = InlineKeyboardBuilder()
    builder.add(*inline_search_buttons_list)
    # builder.adjust([1])
    markup = builder.as_markup()
    await bot.send_message(chat_id = call.from_user.id, text= f"–ò—â–µ–º –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=markup)
    counterpart = await get_counterpart(call.from_user.id)
    if counterpart is None:
        await add_to_search(usr)
    else:
        await drop_from_search(counterpart.telegram_uid)
        await update_status(call.from_user.id, "connected")
        await update_status(counterpart.telegram_uid, "connected")
        print(f"Found match for user {call.from_user.id}(@{call.from_user.username}), {counterpart.telegram_uid}")
        
        builder = InlineKeyboardBuilder()
        builder.add(*inline_connected_buttons_list)
        markup = builder.as_markup()
        counterpart_answer_rating = f"{counterpart.rating} üëç" if counterpart.rating >= 0 else f"{counterpart.rating} üëé"
        my_answer_rating = f"{usr.rating} üëç" if usr.rating >= 0 else f"{usr.rating} üëé"
        await bot.send_message(chat_id = call.from_user.id, text= f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω, —Ä–µ–π—Ç–∏–Ω–≥: {counterpart_answer_rating} \n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quit, —á—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥.", reply_markup=markup)
        await bot.send_message(chat_id = counterpart.telegram_uid, text= f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω, —Ä–µ–π—Ç–∏–Ω–≥: {my_answer_rating} \n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quit, —á—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥.", reply_markup=markup)
        await add_to_connections(call.from_user.id,counterpart.telegram_uid)
             
@router.callback_query(F.data == 'menu')
@router.message(Command("menu"))
async def menu(call):
    
    if isinstance(call, CallbackQuery):
        await call.answer('', show_alert=False)
    await log_user(call.from_user.id)
    user = await fetch_user(call.from_user.id)
    status = user.user_status
    answer = "None"
    if  status == 'normal':
        answer = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, {call.from_user.full_name[:50]}!"
        buttons_list = inline_regular_buttons_list
    elif status == 'banned':
        answer = "–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é."
        buttons_list = inline_banned_buttons_list
    elif status == 'search':
        buttons_list = inline_search_buttons_list
        answer = f"–í—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, {call.from_user.full_name[:50]}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop, —á—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫."
    elif status == 'connected':
        buttons_list = inline_connected_buttons_list
        answer = f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ, {call.from_user.full_name[:50]}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quit, —á—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥."
    
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.add(*buttons_list)
    keyboard_builder.adjust(*[1,2])
    menu_markup = keyboard_builder.as_markup()
    await bot.send_message(chat_id = call.from_user.id, text= answer, reply_markup=menu_markup)

@router.message()  
async def send_message(message : Message):
    did_reply = False if message.reply_to_message is None else True
    connected = await get_connected_user(message.from_user.id)
    if connected is not None:
        if not did_reply:
            reply = await message.copy_to(chat_id=connected)
        else:
            new_reply_id = await get_reply_id(message.reply_to_message.message_id, message.from_user.id)
            # print(new_reply_id, "\n\n\n\n")
            reply = await message.copy_to(chat_id=connected,reply_to_message_id=new_reply_id)
            
        pair = [message.message_id, reply.message_id]
        await log_message(message.from_user.id, pair[0], pair[1])
        await log_message(message.from_user.id, pair[1], pair[0])
    else:
        await basic(message)

async def basic(message : Message):
    builder = InlineKeyboardBuilder()
    builder.add(*inline_to_menu_buttons_list)
    markup = builder.as_markup()
    await message.answer(text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)



